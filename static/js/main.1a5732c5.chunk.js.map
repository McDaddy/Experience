{"version":3,"sources":["page-container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Content","Sider","SubMenu","Menu","PageContainer","react","layout","className","menu","theme","mode","defaultSelectedKeys","Item","key","width","defaultOpenKeys","title","icon","type","react_router_dom","to","style","background","padding","margin","minHeight","this","props","children","React","Home","About","Topics","_ref","match","concat","url","react_router","path","component","Topic","exact","render","_ref2","params","topicId","BasicExample","page_container_PageContainer","Boolean","window","location","hostname","ReactDOM","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAQQA,UAA2BC,IAA3BD,QAAQE,EAAmBD,IAAnBC,QAASC,EAAUF,IAAVE,MACjBC,EAAYC,IAAZD,QAEFE,mLAEF,OACEC,EAAA,cAACC,EAAA,EAAD,CAAQC,UAAU,kBAChBF,EAAA,cAACP,EAAD,CAAQS,UAAU,UAChBF,EAAA,qBAAKE,UAAU,SACfF,EAAA,cAACG,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBJ,UAAU,QAEVF,EAAA,cAACG,EAAA,EAAKI,KAAN,CAAWC,IAAI,KAAf,UAKJR,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACJ,EAAD,CAAOa,MAAO,IAAKP,UAAU,SAC3BF,EAAA,cAACG,EAAA,EAAD,CACEE,KAAK,SACLC,oBAAqB,CAAC,KACtBI,gBAAiB,CAAC,SAElBV,EAAA,cAACH,EAAD,CACEW,IAAI,OACJG,MACEX,EAAA,0BACEA,EAAA,cAACY,EAAA,EAAD,CAAMC,KAAK,WADb,SAMFb,EAAA,cAACG,EAAA,EAAKI,KAAN,CAAWC,IAAI,KAAIR,EAAA,cAACc,EAAA,EAAD,CAAMC,GAAG,UAAT,UACnBf,EAAA,cAACG,EAAA,EAAKI,KAAN,CAAWC,IAAI,KAAIR,EAAA,cAACc,EAAA,EAAD,CAAMC,GAAG,WAAT,cAgCzBf,EAAA,cAACC,EAAA,EAAD,CAAQC,UAAU,kBAChBF,EAAA,cAACL,EAAD,CACEqB,MAAO,CACLC,WAAY,OACZC,QAAS,GACTC,OAAQ,EACRC,UAAW,UAGZC,KAAKC,MAAMC,oBA3EEC,wBCwB5B,SAASC,IACP,OACEzB,EAAA,yBACEA,EAAA,iCAKN,SAAS0B,IACP,OACE1B,EAAA,yBACEA,EAAA,kCAKN,SAAS2B,EAATC,GAAgC,IAAdC,EAAcD,EAAdC,MAChB,OACE7B,EAAA,yBACEA,EAAA,kCACAA,EAAA,wBACEA,EAAA,wBACEA,EAAA,cAACc,EAAA,EAAD,CAAMC,GAAE,GAAAe,OAAKD,EAAME,IAAX,eAAR,yBAEF/B,EAAA,wBACEA,EAAA,cAACc,EAAA,EAAD,CAAMC,GAAE,GAAAe,OAAKD,EAAME,IAAX,gBAAR,eAEF/B,EAAA,wBACEA,EAAA,cAACc,EAAA,EAAD,CAAMC,GAAE,GAAAe,OAAKD,EAAME,IAAX,mBAAR,oBAIJ/B,EAAA,cAACgC,EAAA,EAAD,CAAOC,KAAI,GAAAH,OAAKD,EAAMI,KAAX,aAA4BC,UAAWC,IAClDnC,EAAA,cAACgC,EAAA,EAAD,CACEI,OAAO,EACPH,KAAMJ,EAAMI,KACZI,OAAQ,kBAAMrC,EAAA,sDAMtB,SAASmC,EAATG,GAA+B,IAAdT,EAAcS,EAAdT,MACf,OACE7B,EAAA,yBACEA,EAAA,wBAAK6B,EAAMU,OAAOC,UAKTC,MA/Ef,WACE,OACEzC,EAAA,cAACc,EAAA,EAAD,KACEd,EAAA,cAAC0C,EAAD,KACE1C,EAAA,cAACgC,EAAA,EAAD,CAAOI,OAAO,EAAMH,KAAK,IAAIC,UAAWT,IACxCzB,EAAA,cAACgC,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWR,IAChC1B,EAAA,cAACgC,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWP,OCArBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASV,OAAOW,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a5732c5.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Menu, Icon, Layout } from 'antd';\n\nimport './page-container.scss';\nimport { Link } from 'react-router-dom';\n\nexport interface IProps {}\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nclass PageContainer extends React.PureComponent<IProps, any> {\n  public render() {\n    return (\n      <Layout className=\"page-container\">\n        <Header className=\"header\">\n          <div className=\"logo\" />\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={['2']}\n            className=\"menu\"\n          >\n            <Menu.Item key=\"1\">Home</Menu.Item>\n            {/* <Menu.Item key=\"2\">nav 2</Menu.Item>\n            <Menu.Item key=\"3\">nav 3</Menu.Item> */}\n          </Menu>\n        </Header>\n        <Layout>\n          <Sider width={200} className=\"sider\">\n            <Menu\n              mode=\"inline\"\n              defaultSelectedKeys={['1']}\n              defaultOpenKeys={['sub1']}\n            >\n              <SubMenu\n                key=\"sub1\"\n                title={\n                  <span>\n                    <Icon type=\"laptop\" />\n                    test\n                  </span>\n                }\n              >\n                <Menu.Item key=\"1\"><Link to=\"/about\">about</Link></Menu.Item>\n                <Menu.Item key=\"2\"><Link to=\"/topics\">Topics</Link></Menu.Item>\n              </SubMenu>\n              {/* <SubMenu\n                key=\"sub2\"\n                title={\n                  <span>\n                    <Icon type=\"laptop\" />\n                    subnav 2\n                  </span>\n                }\n              >\n                <Menu.Item key=\"5\">option5</Menu.Item>\n                <Menu.Item key=\"6\">option6</Menu.Item>\n                <Menu.Item key=\"7\">option7</Menu.Item>\n                <Menu.Item key=\"8\">option8</Menu.Item>\n              </SubMenu> */}\n              {/* <SubMenu\n                key=\"sub3\"\n                title={\n                  <span>\n                    <Icon type=\"notification\" />\n                    subnav 3\n                  </span>\n                }\n              >\n                <Menu.Item key=\"9\">option9</Menu.Item>\n                <Menu.Item key=\"10\">option10</Menu.Item>\n                <Menu.Item key=\"11\">option11</Menu.Item>\n                <Menu.Item key=\"12\">option12</Menu.Item>\n              </SubMenu> */}\n            </Menu>\n          </Sider>\n          <Layout className=\"content-layout\">\n            <Content\n              style={{\n                background: '#fff',\n                padding: 24,\n                margin: 0,\n                minHeight: '100vh',\n              }}\n            >\n              {this.props.children}\n            </Content>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport { PageContainer };\n","import * as React from 'react';\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\nimport { PageContainer } from './page-container';\n\nimport 'antd/dist/antd.css';\n\nfunction BasicExample() {\n  return (\n    <Router>\n      <PageContainer>\n        <Route exact={true} path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n      </PageContainer>\n      {/* <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n        <hr />\n        <Route exact={true} path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n      </div>; */}\n    </Router >\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Topics({ match }: any) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact={true}\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Topic({ match }: any) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}\n\nexport default BasicExample;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}